# .github/workflows/build-ubuntu-6t.yml
name: Build OnePlus 6T Boot + Rootfs

on:
  workflow_dispatch:          # 允许手动触发
  push:
    branches: [ main ]        # 也可以按需改成你的主分支

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      # ---------- 资源地址 ----------
      KERNEL_REPO:   https://gitlab.com/sdm845-mainline/linux.git
      KERNEL_BRANCH: sdm845-6.16-845
      CONFIG_URL:    https://cloud.athbe.cn/f/D3Uq/sdm845.config
      CHECK_SCRIPT:  https://cloud.athbe.cn/f/2MTG/check.sh
      DTB_URL:       https://cloud.athbe.cn/f/WEhm/OnePlus6T.dtb
      UBUNTU_BASE:   https://cdimage.ubuntu.com/ubuntu-base/releases/25.04/release/ubuntu-base-25.04-base-arm64.tar.gz
      FIRMWARE_URL:  https://cloud.athbe.cn/f/6nSr/firmware.tar.gz
      TTY_SCRIPT:    https://cloud.athbe.cn/f/7BHR/ttygs0-console.sh
      BOOTMAC_REPO:  https://gitlab.postmarketos.org/postmarketOS/bootmac.git
      # ---------- 输出文件 ----------
      ROOTFS_IMG: rootfs.img
      BOOT_IMG:   boot.img
      # ---------- 缓存键 ----------
      CACHE_KEY: ${{ runner.os }}-bootimage-${{ github.sha }}

    steps:
      # -------------- 基础工具安装 --------------
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            git wget make bc gcc-aarch64-linux-gnu \
            libssl-dev libelf-dev flex bison libncurses5-dev \
            libncursesw5-dev minizip liblz4-tool rsync \
            dpkg dpkg-dev arch-install-scripts qemu-user-static \
            mkbootimg ca-certificates dialog locales nano apt-utils \
            initramfs-tools cpio busybox-initramfs

      # -------------- 缓存/克隆内核 --------------
      - name: Cache kernel source
        uses: actions/cache@v4
        with:
          path: linux-sdm845-6.16-845
          key: ${{ env.CACHE_KEY }}-kernel
          restore-keys: ${{ env.CACHE_KEY }}-kernel

      - name: Clone kernel
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch ${{ env.KERNEL_BRANCH }} \
            ${{ env.KERNEL_REPO }} linux-sdm845-6.16-845

      # -------------- 准备内核配置 --------------
      - name: Prepare kernel config
        run: |
          wget -O sdm845.config ${{ env.CONFIG_URL }}
          wget -O check.sh ${{ env.CHECK_SCRIPT }}
          chmod +x check.sh
          ./check.sh sdm845.config -w
          mv sdm845.config linux-sdm845-6.16-845/.config

      - name: Enable serial gadget (ttyGS0)
        run: |
          sed -i 's/# CONFIG_USB_SERIAL_GADGET is not set/CONFIG_USB_SERIAL_GADGET=y/' \
            linux-sdm845-6.16-845/.config
          sed -i 's/# CONFIG_USB_SERIAL_TEGRA is not set/CONFIG_USB_SERIAL_TEGRA=y/' \
            linux-sdm845-6.16-845/.config

      # -------------- 编译内核 --------------
      - name: Build kernel
        run: |
          make -C linux-sdm845-6.16-845 O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig
          make -C linux-sdm845-6.16-845 O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) Image dtbs

      # -------------- 构建 initrd --------------
      - name: Build initrd
        run: |
          cd linux-sdm845-6.16-845
          rm -f initrd.img
          make -C tools/misc/initramfs-mkinitramfs \
            IMG=initrd.img \
            KERNEL=arch/arm64/boot/Image \
            MODULES=out/arch/arm64/boot/dts/mediatek \
            DTBS=out/arch/arm64/boot/dts/mediatek \
            TUNE=0

      # -------------- 生成 boot.img --------------
      - name: Build boot.img
        run: |
          cd linux-sdm845-6.16-845
          cat initrd.img > ../${{ env.BOOT_IMG }}
          echo 'config.txt' >> ../${{ env.BOOT_IMG }}

      # -------------- 制作 rootfs --------------
      - name: Cache Ubuntu‑Base
        uses: actions/cache@v4
        with:
          path: ubuntu-base
          key: ${{ env.CACHE_KEY }}-ubuntu-base
          restore-keys: ${{ env.CACHE_KEY }}-ubuntu-base

      - name: Download Ubuntu‑Base
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -O ubuntu-base.tar.gz ${{ env.UBUNTU_BASE }}

      - name: Create rootfs image
        run: |
          dd if=/dev/zero of=${{ env.ROOTFS_IMG }} bs=1M count=10240
          sudo mkfs.ext4 -F -L ubuntu-rootfs ${{ env.ROOTFS_IMG }}

      - name: Mount rootfs
        run: |
          sudo mkdir -p mount-root
          sudo mount -o loop ${{ env.ROOTFS_IMG }} mount-root
          sudo mkdir -p mount-root/{proc,sys,dev}
          sudo mount -t proc none mount-root/proc
          sudo mount -t sysfs none mount-root/sys
          sudo mount -t devtmpfs devtmpfs mount-root/dev

      - name: Install base packages inside chroot
        run: |
          sudo chroot mount-root /bin/bash <<'EOF'
          apt-get update -y
          apt-get upgrade -y
          apt-get install -y ca-certificates dialog locales nano apt-utils
          locale-gen en_US.UTF-8 zh_CN.UTF-8
          echo 'OnePlus6T' > /etc/hostname
          apt-get install -y ubuntu-desktop
          adduser --disabled-password --gecos "" athbe
          usermod -aG sudo,adm,dialout,cdrom,floppy,audio,dip,video,plugdev athbe
          echo 'snd-soc-tfa98xx' > /etc/modules-load.d/snd-soc-tfa98xx.conf
          EOF

      - name: Copy firmware to rootfs
        run: |
          sudo mkdir -p mount-root/firmware
          wget -O firmware.tar ${{ env.FIRMWARE_URL }}
          sudo tar -xf firmware.tar -C mount-root/firmware

      - name: Copy kernel modules to Ubuntu rootfs
        run: |
          sudo rsync -a linux-sdm845-6.16-845/out/arch/arm64/boot/lib/modules/ mount-root/lib/modules
          sudo rsync -a linux-sdm845-6.16-845/out/arch/arm64/boot/dts/mediatek/* mount-root/firmware/dtbs

      # -------------- 安装 tty console service --------------
      - name: Install tty console service
        run: |
          wget -O ttygs0-console.sh ${{ env.TTY_SCRIPT }}
          chmod +x ttygs0-console.sh
          sudo mv ttygs0-console.sh /usr/local/bin/
          sudo tee mount-root/etc/systemd/system/oneplus6t-console.service >/dev/null <<'EOF'
          [Unit]
          Description=OnePlus6T USB Console Service
          After=syslog.target systemd-modules-load.service systemd-udevd.service
          Wants=systemd-modules-load.service systemd-udevd.service
          [Service]
          Type=simple
          ExecStart=/usr/local/bin/ttygs0-console.sh
          Restart=always
          RestartSec=10
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=oneplus6t-console
          [Install]
          WantedBy=multi-user.target
          EOF

      # -------------- 安装 shutdown‑modem service --------------
      - name: Install shutdown‑modem service
        run: |
          sudo tee mount-root/etc/systemd/system/shutdown-modem.service >/dev/null <<'EOF'
          [Unit]
          Description=Poweroff modem remoteproc to prevent wlan fw crash
          DefaultDependencies=no
          Before=shutdown.target
          [Service]
          Type=oneshot
          ExecStart=echo stop | tee /sys/class/remoteproc/remoteproc*/state
          [Install]
          WantedBy=shutdown.target
          EOF

      # -------------- 安装 bootmac 工具 --------------
      - name: Install bootmac
        run: |
          git clone --depth 1 ${{ env.BOOTMAC_REPO }} bootmac
          cd bootmac
          make -f Makefile

      # -------------- 卸载并清理 --------------
      - name: Unmount rootfs
        run: |
          sudo umount mount-root/dev
          sudo umount mount-root/sys
          sudo umount mount-root/proc
          sudo umount mount-root
          sudo rmdir mount-root

      # -------------- 转成 sparse rootfs 并上传 --------------
      - name: Convert rootfs to sparse image
        run: |
          sudo e2fsck -f -y ${{ env.ROOTFS_IMG }}
          sudo truncate --size=0 ${{ env.ROOTFS_IMG }}
          sudo mkfs.ext4 -F -L ubuntu-rootfs ${{ env.ROOTFS_IMG }}
          sudo cp -a mount-root/. ${{ env.ROOTFS_IMG }}
          sudo truncate -s 0 sparse-${{ env.ROOTFS_IMG }}
          sudo dd if=${{ env.ROOTFS_IMG }} of=sparse-${{ env.ROOTFS_IMG }} conv=sparse

      # -------------- 上传产物 --------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boot-rootfs
          path: |
            ${{ env.BOOT_IMG }}
            sparse-${{ env.ROOTFS_IMG }}
